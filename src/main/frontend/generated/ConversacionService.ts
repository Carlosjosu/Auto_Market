import { EndpointRequestInit as EndpointRequestInit_1 } from "@vaadin/hilla-frontend";
import type Conversacion_1 from "./com/unl/sistema/base/models/Conversacion.js";
import client_1 from "./connect-client.default.js";
async function agregarConversacion_1(conversacion: Conversacion_1 | undefined, init?: EndpointRequestInit_1): Promise<Record<string, unknown> | undefined> { return client_1.call("ConversacionService", "agregarConversacion", { conversacion }, init); }
async function buscarConversacion_1(idEmisor: number | undefined, idReceptor: number | undefined, init?: EndpointRequestInit_1): Promise<Record<string, string | undefined> | undefined> { return client_1.call("ConversacionService", "buscarConversacion", { idEmisor, idReceptor }, init); }
async function crearOBuscarConversacion_1(idEmisor: number | undefined, idReceptor: number | undefined, idAuto: number | undefined, init?: EndpointRequestInit_1): Promise<Record<string, string | undefined> | undefined> { return client_1.call("ConversacionService", "crearOBuscarConversacion", { idEmisor, idReceptor, idAuto }, init); }
async function encontrarRutaComunicacion_1(origen: number | undefined, destino: number | undefined, init?: EndpointRequestInit_1): Promise<Array<number | undefined> | undefined> { return client_1.call("ConversacionService", "encontrarRutaComunicacion", { origen, destino }, init); }
async function listarTodasConversaciones_1(init?: EndpointRequestInit_1): Promise<Array<Record<string, string | undefined> | undefined> | undefined> { return client_1.call("ConversacionService", "listarTodasConversaciones", {}, init); }
async function obtenerConversacionesPorUsuario_1(usuarioId: number | undefined, init?: EndpointRequestInit_1): Promise<Array<Record<string, string | undefined> | undefined> | undefined> { return client_1.call("ConversacionService", "obtenerConversacionesPorUsuario", { usuarioId }, init); }
async function obtenerConversacionesRecientes_1(usuarioId: number | undefined, limite: number | undefined, init?: EndpointRequestInit_1): Promise<Array<Record<string, string | undefined> | undefined> | undefined> { return client_1.call("ConversacionService", "obtenerConversacionesRecientes", { usuarioId, limite }, init); }
async function obtenerEstadisticas_1(usuarioId: number | undefined, init?: EndpointRequestInit_1): Promise<Record<string, unknown> | undefined> { return client_1.call("ConversacionService", "obtenerEstadisticas", { usuarioId }, init); }
async function obtenerUsuariosConectados_1(usuarioId: number | undefined, init?: EndpointRequestInit_1): Promise<Array<number | undefined> | undefined> { return client_1.call("ConversacionService", "obtenerUsuariosConectados", { usuarioId }, init); }
async function usuariosEstanConectados_1(usuario1: number | undefined, usuario2: number | undefined, init?: EndpointRequestInit_1): Promise<boolean | undefined> { return client_1.call("ConversacionService", "usuariosEstanConectados", { usuario1, usuario2 }, init); }
export { agregarConversacion_1 as agregarConversacion, buscarConversacion_1 as buscarConversacion, crearOBuscarConversacion_1 as crearOBuscarConversacion, encontrarRutaComunicacion_1 as encontrarRutaComunicacion, listarTodasConversaciones_1 as listarTodasConversaciones, obtenerConversacionesPorUsuario_1 as obtenerConversacionesPorUsuario, obtenerConversacionesRecientes_1 as obtenerConversacionesRecientes, obtenerEstadisticas_1 as obtenerEstadisticas, obtenerUsuariosConectados_1 as obtenerUsuariosConectados, usuariosEstanConectados_1 as usuariosEstanConectados };
