import { EndpointRequestInit as EndpointRequestInit_1 } from "@vaadin/hilla-frontend";
import client_1 from "./connect-client.default.js";
async function buscarPorAtributo_1(atributo: string | undefined, valor: string | undefined, init?: EndpointRequestInit_1): Promise<Record<string, string | undefined> | undefined> { return client_1.call("AutoService", "buscarPorAtributo", { atributo, valor }, init); }
async function buscarPorModeloFlexible_1(texto: string | undefined, init?: EndpointRequestInit_1): Promise<Array<Record<string, string | undefined> | undefined> | undefined> { return client_1.call("AutoService", "buscarPorModeloFlexible", { texto }, init); }
async function create_1(modelo: string | undefined, anio: string | undefined, puertas: number | undefined, color: string | undefined, kilometraje: string | undefined, ciudad: string | undefined, precio: number | undefined, matricula: string | undefined, codigoVIN: string | undefined, descripcion: string | undefined, fechaRegistro: string | undefined, estaDisponible: boolean | undefined, idVendedor: number | undefined, idMarca: number | undefined, tipoCombustible: string | undefined, categoria: string | undefined, init?: EndpointRequestInit_1): Promise<void> { return client_1.call("AutoService", "create", { modelo, anio, puertas, color, kilometraje, ciudad, precio, matricula, codigoVIN, descripcion, fechaRegistro, estaDisponible, idVendedor, idMarca, tipoCombustible, categoria }, init); }
async function deleteAuto_1(id: number | undefined, init?: EndpointRequestInit_1): Promise<void> { return client_1.call("AutoService", "deleteAuto", { id }, init); }
async function esAutoDelVendedor_1(idAuto: number | undefined, idVendedor: number | undefined, init?: EndpointRequestInit_1): Promise<boolean | undefined> { return client_1.call("AutoService", "esAutoDelVendedor", { idAuto, idVendedor }, init); }
async function getCategoriasLegibles_1(init?: EndpointRequestInit_1): Promise<Array<string | undefined> | undefined> { return client_1.call("AutoService", "getCategoriasLegibles", {}, init); }
async function getTiposCombustible_1(init?: EndpointRequestInit_1): Promise<Array<string | undefined> | undefined> { return client_1.call("AutoService", "getTiposCombustible", {}, init); }
async function listAuto_1(init?: EndpointRequestInit_1): Promise<Array<Record<string, string | undefined> | undefined> | undefined> { return client_1.call("AutoService", "listAuto", {}, init); }
async function listAutosByVendedor_1(idVendedor: number | undefined, init?: EndpointRequestInit_1): Promise<Array<Record<string, string | undefined> | undefined> | undefined> { return client_1.call("AutoService", "listAutosByVendedor", { idVendedor }, init); }
async function listAutosForComprador_1(idVendedor: number | undefined, init?: EndpointRequestInit_1): Promise<Array<Record<string, string | undefined> | undefined> | undefined> { return client_1.call("AutoService", "listAutosForComprador", { idVendedor }, init); }
async function ordenar_1(atributo: string | undefined, type: number | undefined, init?: EndpointRequestInit_1): Promise<Array<Record<string, string | undefined> | undefined> | undefined> { return client_1.call("AutoService", "ordenar", { atributo, type }, init); }
async function updateAuto_1(id: number | undefined, modelo: string | undefined, anio: string | undefined, puertas: number | undefined, color: string | undefined, kilometraje: string | undefined, ciudad: string | undefined, precio: number | undefined, matricula: string | undefined, codigoVIN: string | undefined, descripcion: string | undefined, fechaRegistro: string | undefined, estaDisponible: boolean | undefined, idVendedor: number | undefined, idMarca: number | undefined, tipoCombustible: string | undefined, categoria: string | undefined, init?: EndpointRequestInit_1): Promise<void> { return client_1.call("AutoService", "updateAuto", { id, modelo, anio, puertas, color, kilometraje, ciudad, precio, matricula, codigoVIN, descripcion, fechaRegistro, estaDisponible, idVendedor, idMarca, tipoCombustible, categoria }, init); }
export { buscarPorAtributo_1 as buscarPorAtributo, buscarPorModeloFlexible_1 as buscarPorModeloFlexible, create_1 as create, deleteAuto_1 as deleteAuto, esAutoDelVendedor_1 as esAutoDelVendedor, getCategoriasLegibles_1 as getCategoriasLegibles, getTiposCombustible_1 as getTiposCombustible, listAuto_1 as listAuto, listAutosByVendedor_1 as listAutosByVendedor, listAutosForComprador_1 as listAutosForComprador, ordenar_1 as ordenar, updateAuto_1 as updateAuto };
